import fs from 'fs';
import chalk from 'chalk';
import webpack from 'webpack';
import WebpackDevServer from 'webpack-dev-server';
import { clearConsole, log } from '../../react-dev-utils/logger';
import {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} from '../../react-dev-utils/WebpackDevServerUtils';
import openBrowser from '../../react-dev-utils/openBrowser';
import isCI from 'is-ci';

import getConfig from '../config/webpack.config';
import createDevServerConfig from '../config/webpackDevServer.config';
import { Paths } from '../../utils/determineTargetPaths';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
  throw err;
});

const isInteractive = process.stdout.isTTY;

// Tools like Cloud9 rely on this.
const portEnv = process.env.PORT;
const DEFAULT_PORT = portEnv ? parseInt(portEnv, 10) : 3000;
const HOST = process.env.HOST || '0.0.0.0';

export default function startWebpack(
  esbuildTargetFactory: string[],
  isApp: boolean,
  dependencyMap: Map<string, string>,
  useReactCreateRoot: boolean,
  styleImports: Set<string>,
  paths: Paths,
) {
  if (process.env.HOST) {
    log(
      chalk.cyan(
        `Attempting to bind to HOST environment variable: ${chalk.yellow(
          chalk.bold(process.env.HOST),
        )}`,
      ),
    );
    log(
      `If this was unintentional, check that you haven't mistakenly set it in your shell.`,
    );
    log(`Learn more here: ${chalk.yellow('https://cra.link/advanced-config')}`);
    log();
  }

  choosePort(HOST, DEFAULT_PORT)
    .then(async (port: string | null) => {
      if (port == null) {
        // We have not found a port.
        return;
      }

      const config = await getConfig(
        false,
        esbuildTargetFactory,
        isApp,
        dependencyMap,
        useReactCreateRoot,
        styleImports,
        paths,
      );
      // overload for webpack-dev-server@4
      config.stats = 'none';
      config.infrastructureLogging = {
        level: 'none',
      };

      const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
      const appName = require(paths.appPackageJson).name;

      const useTypeScript = !isCI && fs.existsSync(paths.appTsConfig);
      const urls = prepareUrls(
        protocol,
        HOST,
        port,
        paths.publicUrlOrPath.slice(0, -1),
      );
      // Create a webpack compiler that is configured with custom messages.
      // Only run typecheck if not in CI env
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const compiler = createCompiler({
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        appName,
        config,
        urls,
        useTypeScript,
        webpack,
      });

      // Load proxy config
      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
      const proxySetting = require(paths.appPackageJson).proxy;
      const proxyConfig = prepareProxy(
        proxySetting,
        paths.appPublic,
        paths.publicUrlOrPath,
      );
      // Serve webpack assets generated by the compiler over a web server.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const serverConfig: any = createDevServerConfig(
        port,
        proxyConfig,
        urls.lanUrlForConfig,
        paths,
      );
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      const devServer = new WebpackDevServer(serverConfig, compiler);

      if (isInteractive) {
        clearConsole();
      }

      // Launch WebpackDevServer.
      log(chalk.cyan('Starting the development server...'));

      await devServer.start();

      openBrowser(urls.localUrlForBrowser);

      ['SIGINT', 'SIGTERM'].forEach(function (sig) {
        process.on(sig, function () {
          devServer.close();
          return;
        });
      });

      // Gracefully exit when stdin ends
      process.stdin.on('end', function () {
        devServer.close();
        return;
      });
    })
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    .catch((err: { message: any }) => {
      if (err && err.message) {
        log(err.message);
      }
    });
}
